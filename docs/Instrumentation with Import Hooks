# Import Hooks
Import Hook is a technic in python, that allows us to modify import behavior of the python modules.
This feature allows to instrument the program with barely any source code modification.

To modify import behaviour, you mu

Python 3.3:

```python

class PostImportFinder:
    def __init__(self):
        self._skip=set()
    
    def find_module(self, fullname, path = None):
        if fullname in self._skip:
            return None
        self._skip.add(fullname)
        return PostImportLoader(self)


class PostImportLoader:
    def __init__(self, finder):
        self._finder = finder
    
    def load_module(self, fullname):
        importlib.import_module(fullname)
        module = sys.modules[fullname]
        if 'package_root' in fullname and 'manager' not in fullname:
                decorate_members(module)
        self._finder._skip.remove(fullname)
        return module
```
replace `package_root` with your module

For python-3.4+ you must define following classes:

```python
import sys
from importlib.machinery import PathFinder, ModuleSpec, SourceFileLoader

class Finder(PathFinder):

    def __init__(self, module_name):
        self.module_name = module_name

    def find_spec(self, fullname, path=None, target=None):
        if fullname == self.module_name:
            spec = super().find_spec(fullname, path, target)
            loader = CustomLoader(fullname, spec.origin)
            return ModuleSpec(fullname, loader)

class CustomLoader(SourceFileLoader):

    def exec_module(self, module):
        super().exec_module(module)
        module.function = patcher(module.function)
        return module
```
